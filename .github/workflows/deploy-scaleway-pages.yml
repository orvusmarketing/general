name: Deploy changed backlink(s) to Scaleway

on:
  push:
    branches: [main] # run every push to main
    paths:
      - "scaleway/**" # only trigger when these paths touched
  workflow_dispatch:

env:
  SCW_ACCESS_KEY: ${{ secrets.SCW_ACCESS_KEY }} # required
  SCW_SECRET_KEY: ${{ secrets.SCW_SECRET_KEY }} # required
  SCW_DEFAULT_ORGANIZATION_ID: ${{ secrets.SCW_DEFAULT_ORGANIZATION_ID }} # required
  SCW_DEFAULT_PROJECT_ID: ${{ secrets.SCW_DEFAULT_PROJECT_ID }} # required

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # need history for git diff

      - name: Install Scaleway CLI and AWS CLI
        run: |
          # Install Go if not already available
          if ! command -v go &> /dev/null; then
            echo "Installing Go..."
            curl -L https://go.dev/dl/go1.21.0.linux-amd64.tar.gz -o go.tar.gz
            sudo rm -rf /usr/local/go
            sudo tar -C /usr/local -xzf go.tar.gz
            echo '/usr/local/go/bin' >> $GITHUB_PATH
            export PATH=$PATH:/usr/local/go/bin
          fi

          # Install Scaleway CLI using Go (recommended method from official docs)
          echo "Installing Scaleway CLI using Go..."
          go install github.com/scaleway/scaleway-cli/v2/cmd/scw@latest

          # Add Go bin directory to PATH for this session
          echo "$HOME/go/bin" >> $GITHUB_PATH
          export PATH=$PATH:$HOME/go/bin

          # Install/Update AWS CLI for S3-compatible operations
          echo "Installing/Updating AWS CLI..."
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install --update

          # Verify installations
          $HOME/go/bin/scw version
          aws --version

      - name: Show event SHAs (debug)
        run: |
          echo "event.before: ${{ github.event.before }}"
          echo "event.after : ${{ github.sha }}"
          git log -1 --pretty=fuller

      - name: Compute changed backlink folders under scaleway/
        id: detect
        shell: bash
        run: |
          set -euo pipefail

          ROOT="scaleway"
          BEFORE="${{ github.event.before }}"
          AFTER="${{ github.sha }}"

          if [ "${{ github.event_name }}" = "push" ] && [ -n "$BEFORE" ] && [ "$BEFORE" != "0000000000000000000000000000000000000000" ]; then
            echo "Using push diff: $BEFORE..$AFTER"
            FILES=$(git diff --name-only "$BEFORE" "$AFTER" | grep "^${ROOT}/" || true)
          else
            echo "Fallback diff: HEAD^..HEAD (or list all if unavailable)"
            FILES=$(git diff --name-only HEAD^ HEAD 2>/dev/null | grep "^${ROOT}/" || true)
            if [ -z "$FILES" ]; then
              FILES=$(git ls-files "${ROOT}" | grep -E "^${ROOT}/.+/.+" || true)
            fi
          fi

          echo "Changed files:"
          echo "$FILES"

          # Early exit if no files in scaleway/ directory were changed
          if [ -z "$FILES" ]; then
            echo "count=0" >> "$GITHUB_OUTPUT"
            echo "No files in scaleway/ directory changed — skipping."
            exit 0
          fi

          # Derive subfolder slugs: scaleway/<slug>/
          FOLDERS=$(echo "$FILES" | awk -F/ 'NF>=3 {print $1"/"$2}' | sort -u)
          echo "Changed folders:"
          echo "$FOLDERS"

          # Keep only folders that actually contain an index.html (or Index.html)
          FINAL=()
          while read -r f; do
            [ -z "$f" ] && continue
            if [ -f "$f/index.html" ] || [ -f "$f/Index.html" ]; then
              FINAL+=("$f")
            fi
          done <<< "$FOLDERS"

          if [ ${#FINAL[@]} -eq 0 ]; then
            echo "count=0" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          printf "%s\n" "${FINAL[@]}" > changed_folders.txt
          echo "count=${#FINAL[@]}" >> "$GITHUB_OUTPUT"
          echo "Will deploy:"
          cat changed_folders.txt

      - name: Stop if nothing to deploy
        if: steps.detect.outputs.count == '0'
        run: echo "No scaleway/* folders with index.html changed — skipping."

      - name: Deploy each changed folder to Scaleway
        if: steps.detect.outputs.count != '0'
        shell: bash
        run: |
          set -euo pipefail

          # Configure Scaleway CLI
          export SCW_ACCESS_KEY="$SCW_ACCESS_KEY"
          export SCW_SECRET_KEY="$SCW_SECRET_KEY"
          export SCW_DEFAULT_ORGANIZATION_ID="$SCW_DEFAULT_ORGANIZATION_ID"
          export SCW_DEFAULT_PROJECT_ID="$SCW_DEFAULT_PROJECT_ID"

          # Initialize Scaleway CLI configuration
          echo "Initializing Scaleway CLI..."
          $HOME/go/bin/scw init \
            --organization-id="$SCW_DEFAULT_ORGANIZATION_ID" \
            --project-id="$SCW_DEFAULT_PROJECT_ID" \
            --non-interactive || echo "CLI may already be configured"

          while read -r DIR; do
            [ -z "$DIR" ] && continue
            # project name = folder name, sanitized for Scaleway
            RAW_PROJECT="$(basename "$DIR")"
            PROJECT="$(echo "$RAW_PROJECT" | tr '[:upper:]' '[:lower:]' | sed -E 's/[^a-z0-9-]+/-/g')"

            echo "::group::Deploying ${DIR} → ${PROJECT}"

            # Normalize filename: Index.html → index.html
            if [ -f "${DIR}/Index.html" ] && [ ! -f "${DIR}/index.html" ]; then
              mv "${DIR}/Index.html" "${DIR}/index.html"
            fi
            if [ ! -f "${DIR}/index.html" ]; then
              echo "ERROR: ${DIR}/index.html not found. Skipping."
              echo "::endgroup::"
              continue
            fi

            # Upload to Scaleway Object Storage
            # Create a temporary directory for the project
            TEMP_DIR="/tmp/${PROJECT}"
            mkdir -p "$TEMP_DIR"
            cp "${DIR}/index.html" "$TEMP_DIR/"

            # Upload using Scaleway CLI (S3-compatible)
            # First, ensure we have a bucket - create if it doesn't exist
            BUCKET_NAME="dyln-static-sites"
            $HOME/go/bin/scw object bucket create name="$BUCKET_NAME" || echo "Bucket may already exist"
            
            # Upload the file using S3-compatible API (as shown in Scaleway docs)
            # Using the put-object command equivalent: aws s3api put-object --bucket BucketName --key dir-1/ObjectName --body ObjectName
            $HOME/go/bin/scw object config install awscli || echo "AWS CLI config may already exist"
            
            # Use AWS CLI with Scaleway endpoint for S3-compatible upload
            AWS_ACCESS_KEY_ID="$SCW_ACCESS_KEY" \
            AWS_SECRET_ACCESS_KEY="$SCW_SECRET_KEY" \
            aws s3api put-object \
              --bucket "$BUCKET_NAME" \
              --key "projects/${PROJECT}/index.html" \
              --body "$TEMP_DIR/index.html" \
              --content-type "text/html" \
              --endpoint-url "https://s3.fr-par.scw.cloud"

            # Clean up temp directory
            rm -rf "$TEMP_DIR"

            echo "Successfully deployed ${PROJECT} to Scaleway Object Storage"
            echo "URL: https://$BUCKET_NAME.s3.fr-par.scw.cloud/projects/${PROJECT}/index.html"
            echo "::endgroup::"
            # small pause to be gentle with API
            sleep 1
          done < changed_folders.txt
