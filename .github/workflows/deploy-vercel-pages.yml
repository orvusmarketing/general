name: Deploy changed backlink(s) to Vercel

on:
  push:
    branches: [main] # run every push to main
    paths:
      - "vercel/**" # only trigger when these paths touched
  workflow_dispatch:

env:
  VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }} # required
  VERCEL_TEAM_SLUG: ${{ secrets.VERCEL_TEAM_SLUG }} # optional (team/org scope)

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # need history for git diff

      - name: Install Vercel CLI & jq
        run: |
          npm i -g vercel@latest
          sudo apt-get update -y
          sudo apt-get install -y jq

      - name: Show event SHAs (debug)
        run: |
          echo "event.before: ${{ github.event.before }}"
          echo "event.after : ${{ github.sha }}"
          git log -1 --pretty=fuller

      - name: Compute changed backlink folders under vercel/
        id: detect
        shell: bash
        run: |
          set -euo pipefail

          ROOT="vercel"
          BEFORE="${{ github.event.before }}"
          AFTER="${{ github.sha }}"

          if [ "${{ github.event_name }}" = "push" ] && [ -n "$BEFORE" ] && [ "$BEFORE" != "0000000000000000000000000000000000000000" ]; then
            echo "Using push diff: $BEFORE..$AFTER"
            FILES=$(git diff --name-only "$BEFORE" "$AFTER" | grep "^${ROOT}/" || true)
          else
            echo "Fallback diff: HEAD^..HEAD (or list all if unavailable)"
            FILES=$(git diff --name-only HEAD^ HEAD 2>/dev/null | grep "^${ROOT}/" || true)
            if [ -z "$FILES" ]; then
              FILES=$(git ls-files "${ROOT}" | grep -E "^${ROOT}/.+/.+" || true)
            fi
          fi

          echo "Changed files:"
          echo "$FILES"

          # Derive subfolder slugs: vercel/<slug>/
          FOLDERS=$(echo "$FILES" | awk -F/ 'NF>=3 {print $1"/"$2}' | sort -u)
          echo "Changed folders:"
          echo "$FOLDERS"

          # Keep only folders that actually contain an index.html (or Index.html)
          FINAL=()
          while read -r f; do
            [ -z "$f" ] && continue
            if [ -f "$f/index.html" ] || [ -f "$f/Index.html" ]; then
              FINAL+=("$f")
            fi
          done <<< "$FOLDERS"

          if [ ${#FINAL[@]} -eq 0 ]; then
            echo "count=0" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          printf "%s\n" "${FINAL[@]}" > changed_folders.txt
          echo "count=${#FINAL[@]}" >> "$GITHUB_OUTPUT"
          echo "Will deploy:"
          cat changed_folders.txt

      - name: Stop if nothing to deploy
        if: steps.detect.outputs.count == '0'
        run: echo "No vercel/* folders with index.html changed — skipping."

      - name: Deploy each changed folder to Vercel
        if: steps.detect.outputs.count != '0'
        shell: bash
        run: |
          set -euo pipefail
          base_scope_args=()
          if [ -n "${VERCEL_TEAM_SLUG:-}" ]; then
            base_scope_args+=(--scope "$VERCEL_TEAM_SLUG")
          fi

          while read -r DIR; do
            [ -z "$DIR" ] && continue
            # project name = folder name, sanitized for Vercel
            RAW_PROJECT="$(basename "$DIR")"
            PROJECT="$(echo "$RAW_PROJECT" | tr '[:upper:]' '[:lower:]' | sed -E 's/[^a-z0-9-]+/-/g')"

            echo "::group::Deploying ${DIR} → ${PROJECT}"

            # Normalize filename: Index.html → index.html
            if [ -f "${DIR}/Index.html" ] && [ ! -f "${DIR}/index.html" ]; then
              mv "${DIR}/Index.html" "${DIR}/index.html"
            fi
            if [ ! -f "${DIR}/index.html" ]; then
              echo "ERROR: ${DIR}/index.html not found. Skipping."
              echo "::endgroup::"
              continue
            fi

            # Ensure clean link state
            rm -rf "${DIR}/.vercel"

            # Minimal local config to force static/no-build behavior
            cat > "${DIR}/vercel.local.json" <<'EOF' { "framework": null, "buildCommand": "", "installCommand": "", "outputDirectory": "." } EOF

            # Link (idempotent) then deploy
            vercel link --cwd "$DIR" --project "$PROJECT" --yes --token "$VERCEL_TOKEN" "${base_scope_args[@]}"
            vercel deploy --cwd "$DIR" --local-config "${DIR}/vercel.local.json" --prod --yes --token "$VERCEL_TOKEN" "${base_scope_args[@]}"

            echo "::endgroup::"
            # small pause to be gentle with API
            sleep 1
          done < changed_folders.txt
